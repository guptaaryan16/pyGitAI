import click
import subprocess
import os
import git
from pathlib import Path
from pygitnotes.gitcontext import Context
from pygitnotes.exceptions import NoGPTResponseError, NotAGitRepositoryError, CommandFailure


@click.command()
@click.option('-m',"--message", type=str, default='',required=False, help='the commit message for manual commit')
@click.option('--generate-message', '-gm', is_flag=True, help='Commit message Generated by AI')
@click.option('--from-commit','-fc', required=False, type=str, default='^HEAD', help='Last commit from which summary is generated')
@click.option('--repo-path', type=Path, required=False, default=Path('./'), help='path to git repo')
@click.option('--include-body', is_flag=True, required=False, help='Generate a body along with the commit')
@click.option('--body-length', '-bl', type=int, default=200, required=False, help='Length of body text that needs to be generated')
@click.option('--context-file', type=str, required=False, help='context for ')
@click.option('--editable', is_flag=True, help='Edit the commit message in editor before it is commited')
@click.help_option('--help', '-h', help='show the `pygit commit` help page')
def commit(message: str, generate_message: bool, from_commit:str, repo_path: str, include_body:bool, body_length:int, context_file:str, editable:bool ):
    """Custom Git Commit Command to work with AI GPT models"""

    # prepare the git command with custom options
    try:
        repo = git.Repo('../ignite')
    except git.exc.InvalidGitRepositoryError:
        raise NotAGitRepositoryError()
    
    # check for the -gm and -m '<message>' flags if they exist together
    if generate_message and message != "":
        raise ValueError('Option to generate message and message argument cannot be used together')    

    # invoke git context function
    context = Context(AUTHOR, EMAIL)

    if from_commit:
        # Update the previous commit 
        context.update_commit(prev_commit=from_commit)

    if include_body:
        # include body in the commit
        context.include_body = True
        context.body_length = body_length

    if generate_message:
        try:
            # Call the subprocess to generate the git commit message 
            generated_message = generate_commit_message(repo, context)
            git_command.append(generated_message)
        except ChildProcessError:
            raise NoGPTResponseError('pyGitCommit failed to generate message.')
    else:
        git_command.append(message)

    try:
        output = subprocess.run(git_command, check=True)
        click.echo(output)
    except subprocess.CalledProcessError:
        raise CommandFailure('PyGitCommit run failed. Report the issue to the developer :-(')


